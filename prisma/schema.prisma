// Fantasync PWA Database Schema
// Configured for Supabase PostgreSQL with Row Level Security

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  schemas           = ["public"]
  extensions        = [uuidOssp(map: "uuid-ossp"), pgcrypto, pgTrgm(map: "pg_trgm")]
}

// Core User Model - matches Supabase auth.users
model User {
  id              String    @id @default(uuid()) @db.Uuid
  email           String    @unique
  username        String    @unique @db.VarChar(30)
  avatarUrl       String?   @map("avatar_url")
  theme           Theme     @default(SYSTEM)
  fontSize        FontSize  @default(MEDIUM)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  
  // Relations
  profile         Profile?
  ownedGames      Game[]    @relation("GameMaster")
  gameParticipations GamePlayer[]
  sentMessages    Message[] @relation("MessageSender")
  characters      Character[]
  
  // Friend relationships
  sentFriendRequests     FriendRelationship[] @relation("FriendRequester")
  receivedFriendRequests FriendRelationship[] @relation("FriendReceiver")
  presence              UserPresence?
  
  // Game invitations
  sentInvitations       GameInvitation[] @relation("InvitationsSent")
  receivedInvitations   GameInvitation[] @relation("InvitationsReceived")
  
  @@map("users")
  @@schema("public")
}

// Extended profile information
model Profile {
  id              String    @id @default(uuid()) @db.Uuid
  userId          String    @unique @map("user_id") @db.Uuid
  bio             String?   @db.Text
  preferences     Json      @default("{}")
  timezone        String    @default("UTC") @db.VarChar(50)
  privacy         Json      @default("{\"profileVisibility\":\"public\",\"showOnlineStatus\":true,\"allowFriendRequests\":true,\"showGameHistory\":true,\"allowDirectMessages\":true}")
  notifications   Json      @default("{\"email\":{\"gameInvites\":true,\"friendRequests\":true,\"messages\":true,\"gameUpdates\":true,\"weeklyDigest\":false},\"push\":{\"enabled\":false,\"gameActivity\":true,\"mentions\":true,\"friendsOnline\":false}}")
  display         Json      @default("{\"compactMode\":false,\"showAvatars\":true,\"animationsEnabled\":true,\"highContrast\":false}")
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("profiles")
  @@schema("public")
}

// Game sessions
model Game {
  id              String      @id @default(uuid()) @db.Uuid
  name            String      @db.VarChar(100)
  description     String?     @db.Text
  campaignName    String?     @map("campaign_name") @db.VarChar(100)
  system          GameSystem  @default(DND5E)
  coverImage      String?     @map("cover_image")
  themeColor      String?     @map("theme_color") @db.VarChar(7)
  privacy         GamePrivacy @default(PRIVATE)
  maxPlayers      Int         @default(4) @map("max_players")
  status          GameStatus  @default(PREPARING)
  currentSession  Int         @default(0) @map("current_session")
  nextSession     DateTime?   @map("next_session")
  settings        Json        @default("{}")
  masterId        String      @map("master_id") @db.Uuid
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  
  // Relations
  master          User        @relation("GameMaster", fields: [masterId], references: [id], onDelete: Cascade)
  players         GamePlayer[]
  invitations     GameInvitation[]
  messages        Message[]
  characters      Character[]
  currentlyPlaying UserPresence[]
  
  @@index([masterId])
  @@index([status])
  @@index([privacy])
  @@map("games")
  @@schema("public")
}

// Game participation junction table
model GamePlayer {
  id              String      @id @default(uuid()) @db.Uuid
  gameId          String      @map("game_id") @db.Uuid
  userId          String      @map("user_id") @db.Uuid
  role            PlayerRole  @default(PLAYER)
  joinedAt        DateTime    @default(now()) @map("joined_at")
  lastSeenAt      DateTime    @default(now()) @map("last_seen_at")
  isActive        Boolean     @default(true) @map("is_active")
  
  // Relations
  game            Game        @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([gameId, userId])
  @@index([gameId])
  @@index([userId])
  @@map("game_players")
  @@schema("public")
}

// Messages in game chat
model Message {
  id              String      @id @default(uuid()) @db.Uuid
  gameId          String      @map("game_id") @db.Uuid
  authorId        String      @map("author_id") @db.Uuid
  content         String      @db.Text
  type            MessageType @default(CHAT)
  metadata        Json?       // For dice rolls, system messages, etc.
  isEdited        Boolean     @default(false) @map("is_edited")
  editedAt        DateTime?   @map("edited_at")
  createdAt       DateTime    @default(now()) @map("created_at")
  
  // Relations
  game            Game        @relation(fields: [gameId], references: [id], onDelete: Cascade)
  author          User        @relation("MessageSender", fields: [authorId], references: [id], onDelete: Cascade)
  attachments     MessageAttachment[]
  
  @@index([gameId, createdAt])
  @@index([authorId])
  @@map("messages")
  @@schema("public")
}

// Game invitations
model GameInvitation {
  id              String           @id @default(uuid()) @db.Uuid
  code            String           @unique @default(uuid())
  type            InvitationType
  status          InvitationStatus @default(PENDING)
  expiresAt       DateTime?        @map("expires_at")
  message         String?          @db.Text
  createdAt       DateTime         @default(now()) @map("created_at")
  usedAt          DateTime?        @map("used_at")
  
  // Relations
  gameId          String           @map("game_id") @db.Uuid
  game            Game             @relation(fields: [gameId], references: [id], onDelete: Cascade)
  invitedById     String           @map("invited_by_id") @db.Uuid
  invitedBy       User             @relation("InvitationsSent", fields: [invitedById], references: [id])
  invitedUserId   String?          @map("invited_user_id") @db.Uuid
  invitedUser     User?            @relation("InvitationsReceived", fields: [invitedUserId], references: [id])
  
  @@index([gameId])
  @@index([code])
  @@index([invitedUserId, status])
  @@map("game_invitations")
  @@schema("public")
}

// Message attachments
model MessageAttachment {
  id              String         @id @default(uuid()) @db.Uuid
  type            AttachmentType
  url             String
  name            String
  size            Int            // in bytes
  mimeType        String?        @map("mime_type")
  
  // Relations
  messageId       String         @map("message_id") @db.Uuid
  message         Message        @relation(fields: [messageId], references: [id], onDelete: Cascade)
  
  @@index([messageId])
  @@map("message_attachments")
  @@schema("public")
}

// Character sheets
model Character {
  id              String      @id @default(uuid()) @db.Uuid
  gameId          String      @map("game_id") @db.Uuid
  playerId        String      @map("player_id") @db.Uuid
  name            String      @db.VarChar(50)
  avatarUrl       String?     @map("avatar_url")
  data            Json        @default("{}")  // Character sheet data as JSON
  isActive        Boolean     @default(true) @map("is_active")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  
  // Relations
  game            Game        @relation(fields: [gameId], references: [id], onDelete: Cascade)
  player          User        @relation(fields: [playerId], references: [id], onDelete: Cascade)
  
  @@unique([gameId, playerId, name])
  @@map("characters")
  @@schema("public")
}

// Friend relationships
model FriendRelationship {
  id          String        @id @default(uuid()) @db.Uuid
  userId      String        @map("user_id") @db.Uuid
  friendId    String        @map("friend_id") @db.Uuid
  status      FriendStatus  @default(PENDING)
  createdAt   DateTime      @default(now()) @map("created_at")
  acceptedAt  DateTime?     @map("accepted_at")
  
  // Relations
  user        User          @relation("FriendRequester", fields: [userId], references: [id], onDelete: Cascade)
  friend      User          @relation("FriendReceiver", fields: [friendId], references: [id], onDelete: Cascade)
  
  @@unique([userId, friendId])
  @@map("friend_relationships")
  @@schema("public")
}

// User presence tracking
model UserPresence {
  userId         String          @id @map("user_id") @db.Uuid
  status         PresenceStatus  @default(OFFLINE)
  lastSeen       DateTime        @default(now()) @map("last_seen")
  currentGameId  String?         @map("current_game_id") @db.Uuid
  statusMessage  String?         @map("status_message") @db.VarChar(100)
  updatedAt      DateTime        @updatedAt @map("updated_at")
  
  // Relations
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  currentGame    Game?           @relation(fields: [currentGameId], references: [id], onDelete: SetNull)
  
  @@map("user_presence")
  @@schema("public")
}

// Enums
enum Theme {
  SYSTEM
  LIGHT
  DARK
  
  @@schema("public")
}

enum FontSize {
  SMALL
  MEDIUM
  LARGE
  
  @@schema("public")
}

enum GameSystem {
  DND5E
  PATHFINDER2E
  CALL_OF_CTHULHU
  VAMPIRE
  CUSTOM
  
  @@schema("public")
}

enum PlayerRole {
  MASTER
  PLAYER
  SPECTATOR
  
  @@schema("public")
}

enum MessageType {
  CHAT
  DICE_ROLL
  SYSTEM
  ACTION
  NARRATION
  
  @@schema("public")
}

enum FriendStatus {
  PENDING
  ACCEPTED
  BLOCKED
  
  @@schema("public")
}

enum PresenceStatus {
  ONLINE
  AWAY
  BUSY
  OFFLINE
  
  @@schema("public")
}

// New enums for Game Core System
enum GamePrivacy {
  PRIVATE       // Invite only
  FRIENDS       // Friends can request to join
  PUBLIC        // Anyone can join
  
  @@schema("public")
}

enum GameStatus {
  PREPARING     // Setting up
  ACTIVE        // In progress
  PAUSED        // Temporarily paused
  COMPLETED     // Finished
  ARCHIVED      // Archived
  
  @@schema("public")
}

enum InvitationType {
  DIRECT        // Direct invitation to specific user
  LINK          // Shareable link
  REQUEST       // Join request from player
  
  @@schema("public")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
  CANCELLED
  
  @@schema("public")
}

enum AttachmentType {
  IMAGE
  MAP
  CHARACTER_SHEET
  HANDOUT
  AUDIO
  
  @@schema("public")
}
